name: Deploy AI Photobooth

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  # Infrastructure Deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write   # Required for OIDC
      contents: read    # Required to checkout code
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-InfrastructureDeploy
    
    - name: Install dependencies
      run: |
        npm ci
        cd packages/infrastructure
        npm ci
    
    - name: Install AWS CDK
      run: npm install -g aws-cdk@latest
    
    - name: Deploy infrastructure
      run: |
        cd packages/infrastructure
        cdk deploy PhotoboothStack-dev --context environment=dev --require-approval never --verbose
      env:
        CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test
    
    - name: Build applications
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          packages/frontend/dist/
          packages/backend/dist/
        retention-days: 1

  # Deploy Applications
  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-test]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write   # Required for OIDC
      contents: read    # Required to checkout code
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-ApplicationDeploy
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push frontend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ai-photobooth-frontend-dev
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.frontend -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Build and push backend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ai-photobooth-backend-dev
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.backend -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Update ECS service
      run: |
        # Force new deployment of ECS service to pick up new images
        aws ecs update-service \
          --cluster photobooth-cluster-dev \
          --service photobooth-processing-dev \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster photobooth-cluster-dev \
          --services photobooth-processing-dev \
          --region ${{ env.AWS_REGION }}
    
    - name: Run post-deployment validation
      run: |
        # Wait a bit for the service to be fully ready
        sleep 30
        
        # Get the load balancer URL from CloudFormation outputs
        ALB_URL=$(aws cloudformation describe-stacks \
          --stack-name PhotoboothStack-dev \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerUrl`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        # Health check
        echo "Testing health endpoint: $ALB_URL/api/health"
        curl -f "$ALB_URL/api/health" || exit 1
        
        echo "Deployment validation successful!"

  # Staging deployment (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-applications]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-staging]')
    environment: staging
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-StagingDeploy
    
    # Similar steps as dev deployment but for staging environment
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment steps here