/**
 * Basic Infrastructure Tests
 * Simple tests to verify CDK stack compilation
 */

import { App } from 'aws-cdk-lib';
import { Template } from 'aws-cdk-lib/assertions';
import { PhotoboothStack } from '../src/stacks/photobooth-stack';
import { environments } from '../src/config/environments';

describe('Basic Infrastructure Tests', () => {
  test('CDK stack compiles without errors', () => {
    const app = new App();
    
    // Create stack with test configuration
    const stack = new PhotoboothStack(app, 'TestStack', {
      env: {
        account: '123456789012',
        region: 'us-east-1',
      },
      environmentConfig: environments.dev,
    });
    
    // Should not throw
    const template = Template.fromStack(stack);
    
    // Basic assertions
    expect(template).toBeDefined();
    expect(stack).toBeDefined();
  });

  test('Stack creates S3 bucket', () => {
    const app = new App();
    const stack = new PhotoboothStack(app, 'TestStack', {
      env: {
        account: '123456789012',
        region: 'us-east-1',
      },
      environmentConfig: environments.dev,
    });
    
    const template = Template.fromStack(stack);
    
    // Should have at least one S3 bucket
    template.resourceCountIs('AWS::S3::Bucket', 1);
  });

  test('Stack creates DynamoDB tables', () => {
    const app = new App();
    const stack = new PhotoboothStack(app, 'TestStack', {
      env: {
        account: '123456789012',
        region: 'us-east-1',
      },
      environmentConfig: environments.dev,
    });
    
    const template = Template.fromStack(stack);
    
    // Should have DynamoDB tables
    template.resourceCountIs('AWS::DynamoDB::Table', 2);
  });

  test('Stack creates ECS resources', () => {
    const app = new App();
    const stack = new PhotoboothStack(app, 'TestStack', {
      env: {
        account: '123456789012',
        region: 'us-east-1',
      },
      environmentConfig: environments.dev,
    });
    
    const template = Template.fromStack(stack);
    
    // Should have ECS cluster
    template.resourceCountIs('AWS::ECS::Cluster', 1);
    
    // Should have ECS service
    template.resourceCountIs('AWS::ECS::Service', 1);
    
    // Should have task definition
    template.resourceCountIs('AWS::ECS::TaskDefinition', 1);
  });

  test('Stack creates load balancer', () => {
    const app = new App();
    const stack = new PhotoboothStack(app, 'TestStack', {
      env: {
        account: '123456789012',
        region: 'us-east-1',
      },
      environmentConfig: environments.dev,
    });
    
    const template = Template.fromStack(stack);
    
    // Should have application load balancer
    template.resourceCountIs('AWS::ElasticLoadBalancingV2::LoadBalancer', 1);
  });

  test('Stack synthesizes successfully', () => {
    const app = new App();
    const stack = new PhotoboothStack(app, 'TestStack', {
      env: {
        account: '123456789012',
        region: 'us-east-1',
      },
      environmentConfig: environments.dev,
    });
    
    // Should not throw during synthesis
    expect(() => {
      app.synth();
    }).not.toThrow();
  });
});